-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axi_stream_gpio is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    InputData_V : IN STD_LOGIC_VECTOR (0 downto 0);
    InputData_V_ap_vld : IN STD_LOGIC;
    OutputData_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OutputData_TVALID : OUT STD_LOGIC;
    OutputData_TREADY : IN STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of axi_stream_gpio is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "axi_stream_gpio,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.008000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=201,HLS_SYN_LUT=236,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal InputData_V_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal InputData_V_in_sig : STD_LOGIC_VECTOR (0 downto 0);
    signal InputData_V_ap_vld_preg : STD_LOGIC := '0';
    signal InputData_V_ap_vld_in_sig : STD_LOGIC;
    signal OutputData_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal OutputData_1_vld_in : STD_LOGIC;
    signal OutputData_1_vld_out : STD_LOGIC;
    signal OutputData_1_ack_in : STD_LOGIC;
    signal OutputData_1_ack_out : STD_LOGIC;
    signal OutputData_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal OutputData_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal OutputData_1_sel_rd : STD_LOGIC := '0';
    signal OutputData_1_sel_wr : STD_LOGIC := '0';
    signal OutputData_1_sel : STD_LOGIC;
    signal OutputData_1_load_A : STD_LOGIC;
    signal OutputData_1_load_B : STD_LOGIC;
    signal OutputData_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OutputData_1_state_cmp_full : STD_LOGIC;
    signal tmpOutput : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal bitCounter : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal InputData_V_blk_n : STD_LOGIC;
    signal OutputData_TDATA_blk_n : STD_LOGIC;
    signal tmp_3_fu_104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_3_reg_133 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_87_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state1_io : BOOLEAN;
    signal tmp_2_fu_98_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_tmpOutput_new_phi_fu_52_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmpOutput_new_reg_49 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_phi_mux_bitCounter_new_phi_fu_62_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitCounter_new_reg_59 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_79_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_73_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    InputData_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                InputData_V_ap_vld_preg <= ap_const_logic_0;
            else
                if ((not(((ap_const_logic_0 = OutputData_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    InputData_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = InputData_V_ap_vld))) then 
                    InputData_V_ap_vld_preg <= InputData_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    InputData_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                InputData_V_preg <= ap_const_lv1_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = InputData_V_ap_vld))) then 
                    InputData_V_preg <= InputData_V;
                end if; 
            end if;
        end if;
    end process;


    OutputData_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OutputData_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OutputData_1_ack_out) and (ap_const_logic_1 = OutputData_1_vld_out))) then 
                                        OutputData_1_sel_rd <= not(OutputData_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OutputData_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OutputData_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OutputData_1_ack_in) and (ap_const_logic_1 = OutputData_1_vld_in))) then 
                                        OutputData_1_sel_wr <= not(OutputData_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OutputData_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OutputData_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OutputData_1_state) and (ap_const_logic_0 = OutputData_1_vld_in)) or ((ap_const_lv2_3 = OutputData_1_state) and (ap_const_logic_0 = OutputData_1_vld_in) and (ap_const_logic_1 = OutputData_1_ack_out)))) then 
                    OutputData_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OutputData_1_state) and (ap_const_logic_0 = OutputData_1_ack_out)) or ((ap_const_lv2_3 = OutputData_1_state) and (ap_const_logic_0 = OutputData_1_ack_out) and (ap_const_logic_1 = OutputData_1_vld_in)))) then 
                    OutputData_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OutputData_1_vld_in) and (ap_const_logic_1 = OutputData_1_ack_out))) and not(((ap_const_logic_0 = OutputData_1_ack_out) and (ap_const_logic_1 = OutputData_1_vld_in))) and (ap_const_lv2_3 = OutputData_1_state)) or ((ap_const_lv2_1 = OutputData_1_state) and (ap_const_logic_1 = OutputData_1_ack_out)) or ((ap_const_lv2_2 = OutputData_1_state) and (ap_const_logic_1 = OutputData_1_vld_in)))) then 
                    OutputData_1_state <= ap_const_lv2_3;
                else 
                    OutputData_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    bitCounter_new_reg_59_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = InputData_V_ap_vld_in_sig) or (ap_const_boolean_1 = ap_block_state1_io))) and (tmp_3_fu_104_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                bitCounter_new_reg_59 <= tmp_2_fu_98_p2;
            elsif ((not(((ap_const_logic_0 = OutputData_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io))) and (tmp_3_reg_133 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                bitCounter_new_reg_59 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmpOutput_new_reg_49_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = InputData_V_ap_vld_in_sig) or (ap_const_boolean_1 = ap_block_state1_io))) and (tmp_3_fu_104_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmpOutput_new_reg_49 <= tmp_1_fu_87_p2;
            elsif ((not(((ap_const_logic_0 = OutputData_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io))) and (tmp_3_reg_133 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                tmpOutput_new_reg_49 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OutputData_1_load_A)) then
                OutputData_1_payload_A <= tmp_1_fu_87_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OutputData_1_load_B)) then
                OutputData_1_payload_B <= tmp_1_fu_87_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = OutputData_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                bitCounter <= ap_phi_mux_bitCounter_new_phi_fu_62_p4;
                tmpOutput <= ap_phi_mux_tmpOutput_new_phi_fu_52_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = InputData_V_ap_vld_in_sig) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_3_reg_133 <= tmp_3_fu_104_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, InputData_V_ap_vld_in_sig, OutputData_1_ack_in, OutputData_1_state, ap_CS_fsm_state2, ap_block_state1_io, ap_block_state2_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = InputData_V_ap_vld_in_sig) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_logic_0 = OutputData_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io))) and (OutputData_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    InputData_V_ap_vld_in_sig_assign_proc : process(InputData_V_ap_vld, InputData_V_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = InputData_V_ap_vld)) then 
            InputData_V_ap_vld_in_sig <= InputData_V_ap_vld;
        else 
            InputData_V_ap_vld_in_sig <= InputData_V_ap_vld_preg;
        end if; 
    end process;


    InputData_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, InputData_V_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            InputData_V_blk_n <= InputData_V_ap_vld;
        else 
            InputData_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    InputData_V_in_sig_assign_proc : process(InputData_V, InputData_V_preg, InputData_V_ap_vld)
    begin
        if ((ap_const_logic_1 = InputData_V_ap_vld)) then 
            InputData_V_in_sig <= InputData_V;
        else 
            InputData_V_in_sig <= InputData_V_preg;
        end if; 
    end process;

    OutputData_1_ack_in <= OutputData_1_state(1);
    OutputData_1_ack_out <= OutputData_TREADY;

    OutputData_1_data_out_assign_proc : process(OutputData_1_payload_A, OutputData_1_payload_B, OutputData_1_sel)
    begin
        if ((ap_const_logic_1 = OutputData_1_sel)) then 
            OutputData_1_data_out <= OutputData_1_payload_B;
        else 
            OutputData_1_data_out <= OutputData_1_payload_A;
        end if; 
    end process;

    OutputData_1_load_A <= (not(OutputData_1_sel_wr) and OutputData_1_state_cmp_full);
    OutputData_1_load_B <= (OutputData_1_state_cmp_full and OutputData_1_sel_wr);
    OutputData_1_sel <= OutputData_1_sel_rd;
    OutputData_1_state_cmp_full <= '0' when (OutputData_1_state = ap_const_lv2_1) else '1';

    OutputData_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, InputData_V_ap_vld_in_sig, tmp_3_fu_104_p2, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = InputData_V_ap_vld_in_sig) or (ap_const_boolean_1 = ap_block_state1_io))) and (tmp_3_fu_104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            OutputData_1_vld_in <= ap_const_logic_1;
        else 
            OutputData_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OutputData_1_vld_out <= OutputData_1_state(0);
    OutputData_TDATA <= OutputData_1_data_out;

    OutputData_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, OutputData_1_state, tmp_3_fu_104_p2, ap_CS_fsm_state2, tmp_3_reg_133)
    begin
        if ((((ap_start = ap_const_logic_1) and (tmp_3_fu_104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_3_reg_133 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            OutputData_TDATA_blk_n <= OutputData_1_state(1);
        else 
            OutputData_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    OutputData_TVALID <= OutputData_1_state(0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, InputData_V_ap_vld_in_sig)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = InputData_V_ap_vld_in_sig));
    end process;


    ap_block_state1_io_assign_proc : process(OutputData_1_ack_in, tmp_3_fu_104_p2)
    begin
                ap_block_state1_io <= ((tmp_3_fu_104_p2 = ap_const_lv1_1) and (ap_const_logic_0 = OutputData_1_ack_in));
    end process;


    ap_block_state2_io_assign_proc : process(OutputData_1_ack_in, tmp_3_reg_133)
    begin
                ap_block_state2_io <= ((tmp_3_reg_133 = ap_const_lv1_1) and (ap_const_logic_0 = OutputData_1_ack_in));
    end process;


    ap_done_assign_proc : process(OutputData_1_ack_in, OutputData_1_state, ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if ((not(((ap_const_logic_0 = OutputData_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io))) and (OutputData_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_bitCounter_new_phi_fu_62_p4_assign_proc : process(ap_CS_fsm_state2, tmp_3_reg_133, bitCounter_new_reg_59)
    begin
        if (((tmp_3_reg_133 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_phi_mux_bitCounter_new_phi_fu_62_p4 <= ap_const_lv32_0;
        else 
            ap_phi_mux_bitCounter_new_phi_fu_62_p4 <= bitCounter_new_reg_59;
        end if; 
    end process;


    ap_phi_mux_tmpOutput_new_phi_fu_52_p4_assign_proc : process(ap_CS_fsm_state2, tmp_3_reg_133, tmpOutput_new_reg_49)
    begin
        if (((tmp_3_reg_133 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_phi_mux_tmpOutput_new_phi_fu_52_p4 <= ap_const_lv32_0;
        else 
            ap_phi_mux_tmpOutput_new_phi_fu_52_p4 <= tmpOutput_new_reg_49;
        end if; 
    end process;


    ap_ready_assign_proc : process(OutputData_1_ack_in, OutputData_1_state, ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if ((not(((ap_const_logic_0 = OutputData_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io))) and (OutputData_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    tmp_1_fu_87_p2 <= std_logic_vector(unsigned(tmp_fu_79_p3) + unsigned(tmp_4_fu_73_p2));
    tmp_2_fu_98_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(bitCounter));
    tmp_3_fu_104_p2 <= "1" when (tmp_2_fu_98_p2 = ap_const_lv32_20) else "0";
    tmp_4_fu_73_p2 <= std_logic_vector(shift_left(unsigned(tmpOutput),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_fu_79_p3 <= 
        ap_const_lv32_FFFFFFFF when (InputData_V_in_sig(0) = '1') else 
        ap_const_lv32_0;
end behav;
