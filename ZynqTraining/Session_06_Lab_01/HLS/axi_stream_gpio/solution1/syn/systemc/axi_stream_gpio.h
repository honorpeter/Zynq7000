// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _axi_stream_gpio_HH_
#define _axi_stream_gpio_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct axi_stream_gpio : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<1> > InputData_V;
    sc_in< sc_logic > InputData_V_ap_vld;
    sc_out< sc_lv<32> > OutputData_TDATA;
    sc_out< sc_logic > OutputData_TVALID;
    sc_in< sc_logic > OutputData_TREADY;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    axi_stream_gpio(sc_module_name name);
    SC_HAS_PROCESS(axi_stream_gpio);

    ~axi_stream_gpio();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > InputData_V_preg;
    sc_signal< sc_lv<1> > InputData_V_in_sig;
    sc_signal< sc_logic > InputData_V_ap_vld_preg;
    sc_signal< sc_logic > InputData_V_ap_vld_in_sig;
    sc_signal< sc_lv<32> > OutputData_1_data_out;
    sc_signal< sc_logic > OutputData_1_vld_in;
    sc_signal< sc_logic > OutputData_1_vld_out;
    sc_signal< sc_logic > OutputData_1_ack_in;
    sc_signal< sc_logic > OutputData_1_ack_out;
    sc_signal< sc_lv<32> > OutputData_1_payload_A;
    sc_signal< sc_lv<32> > OutputData_1_payload_B;
    sc_signal< sc_logic > OutputData_1_sel_rd;
    sc_signal< sc_logic > OutputData_1_sel_wr;
    sc_signal< sc_logic > OutputData_1_sel;
    sc_signal< sc_logic > OutputData_1_load_A;
    sc_signal< sc_logic > OutputData_1_load_B;
    sc_signal< sc_lv<2> > OutputData_1_state;
    sc_signal< sc_logic > OutputData_1_state_cmp_full;
    sc_signal< sc_lv<32> > tmpOutput;
    sc_signal< sc_lv<32> > bitCounter;
    sc_signal< sc_logic > InputData_V_blk_n;
    sc_signal< sc_logic > OutputData_TDATA_blk_n;
    sc_signal< sc_lv<1> > tmp_3_fu_104_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_3_reg_133;
    sc_signal< sc_lv<32> > tmp_1_fu_87_p2;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_state1_io;
    sc_signal< sc_lv<32> > tmp_2_fu_98_p2;
    sc_signal< sc_lv<32> > ap_phi_mux_tmpOutput_new_phi_fu_52_p4;
    sc_signal< sc_lv<32> > tmpOutput_new_reg_49;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< sc_lv<32> > ap_phi_mux_bitCounter_new_phi_fu_62_p4;
    sc_signal< sc_lv<32> > bitCounter_new_reg_59;
    sc_signal< sc_lv<32> > tmp_fu_79_p3;
    sc_signal< sc_lv<32> > tmp_4_fu_73_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<32> ap_const_lv32_20;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_InputData_V_ap_vld_in_sig();
    void thread_InputData_V_blk_n();
    void thread_InputData_V_in_sig();
    void thread_OutputData_1_ack_in();
    void thread_OutputData_1_ack_out();
    void thread_OutputData_1_data_out();
    void thread_OutputData_1_load_A();
    void thread_OutputData_1_load_B();
    void thread_OutputData_1_sel();
    void thread_OutputData_1_state_cmp_full();
    void thread_OutputData_1_vld_in();
    void thread_OutputData_1_vld_out();
    void thread_OutputData_TDATA();
    void thread_OutputData_TDATA_blk_n();
    void thread_OutputData_TVALID();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_state1();
    void thread_ap_block_state1_io();
    void thread_ap_block_state2_io();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_bitCounter_new_phi_fu_62_p4();
    void thread_ap_phi_mux_tmpOutput_new_phi_fu_52_p4();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_ap_rst_n_inv();
    void thread_tmp_1_fu_87_p2();
    void thread_tmp_2_fu_98_p2();
    void thread_tmp_3_fu_104_p2();
    void thread_tmp_4_fu_73_p2();
    void thread_tmp_fu_79_p3();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
