// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "axi_stream_gpio.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic axi_stream_gpio::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic axi_stream_gpio::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> axi_stream_gpio::ap_ST_fsm_state1 = "1";
const sc_lv<2> axi_stream_gpio::ap_ST_fsm_state2 = "10";
const sc_lv<32> axi_stream_gpio::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool axi_stream_gpio::ap_const_boolean_1 = true;
const sc_lv<1> axi_stream_gpio::ap_const_lv1_0 = "0";
const sc_lv<1> axi_stream_gpio::ap_const_lv1_1 = "1";
const sc_lv<2> axi_stream_gpio::ap_const_lv2_0 = "00";
const sc_lv<2> axi_stream_gpio::ap_const_lv2_2 = "10";
const sc_lv<2> axi_stream_gpio::ap_const_lv2_3 = "11";
const sc_lv<2> axi_stream_gpio::ap_const_lv2_1 = "1";
const sc_lv<32> axi_stream_gpio::ap_const_lv32_1 = "1";
const sc_lv<32> axi_stream_gpio::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<32> axi_stream_gpio::ap_const_lv32_20 = "100000";

axi_stream_gpio::axi_stream_gpio(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_InputData_V_ap_vld_in_sig);
    sensitive << ( InputData_V_ap_vld );
    sensitive << ( InputData_V_ap_vld_preg );

    SC_METHOD(thread_InputData_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( InputData_V_ap_vld );

    SC_METHOD(thread_InputData_V_in_sig);
    sensitive << ( InputData_V );
    sensitive << ( InputData_V_preg );
    sensitive << ( InputData_V_ap_vld );

    SC_METHOD(thread_OutputData_1_ack_in);
    sensitive << ( OutputData_1_state );

    SC_METHOD(thread_OutputData_1_ack_out);
    sensitive << ( OutputData_TREADY );

    SC_METHOD(thread_OutputData_1_data_out);
    sensitive << ( OutputData_1_payload_A );
    sensitive << ( OutputData_1_payload_B );
    sensitive << ( OutputData_1_sel );

    SC_METHOD(thread_OutputData_1_load_A);
    sensitive << ( OutputData_1_sel_wr );
    sensitive << ( OutputData_1_state_cmp_full );

    SC_METHOD(thread_OutputData_1_load_B);
    sensitive << ( OutputData_1_sel_wr );
    sensitive << ( OutputData_1_state_cmp_full );

    SC_METHOD(thread_OutputData_1_sel);
    sensitive << ( OutputData_1_sel_rd );

    SC_METHOD(thread_OutputData_1_state_cmp_full);
    sensitive << ( OutputData_1_state );

    SC_METHOD(thread_OutputData_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( InputData_V_ap_vld_in_sig );
    sensitive << ( tmp_3_fu_104_p2 );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_OutputData_1_vld_out);
    sensitive << ( OutputData_1_state );

    SC_METHOD(thread_OutputData_TDATA);
    sensitive << ( OutputData_1_data_out );

    SC_METHOD(thread_OutputData_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( OutputData_1_state );
    sensitive << ( tmp_3_fu_104_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_3_reg_133 );

    SC_METHOD(thread_OutputData_TVALID);
    sensitive << ( OutputData_1_state );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( InputData_V_ap_vld_in_sig );

    SC_METHOD(thread_ap_block_state1_io);
    sensitive << ( OutputData_1_ack_in );
    sensitive << ( tmp_3_fu_104_p2 );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( OutputData_1_ack_in );
    sensitive << ( tmp_3_reg_133 );

    SC_METHOD(thread_ap_done);
    sensitive << ( OutputData_1_ack_in );
    sensitive << ( OutputData_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_bitCounter_new_phi_fu_62_p4);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_3_reg_133 );
    sensitive << ( bitCounter_new_reg_59 );

    SC_METHOD(thread_ap_phi_mux_tmpOutput_new_phi_fu_52_p4);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_3_reg_133 );
    sensitive << ( tmpOutput_new_reg_49 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( OutputData_1_ack_in );
    sensitive << ( OutputData_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_ap_return);
    sensitive << ( OutputData_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_tmp_1_fu_87_p2);
    sensitive << ( tmp_fu_79_p3 );
    sensitive << ( tmp_4_fu_73_p2 );

    SC_METHOD(thread_tmp_2_fu_98_p2);
    sensitive << ( bitCounter );

    SC_METHOD(thread_tmp_3_fu_104_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( InputData_V_ap_vld_in_sig );
    sensitive << ( ap_block_state1_io );
    sensitive << ( tmp_2_fu_98_p2 );

    SC_METHOD(thread_tmp_4_fu_73_p2);
    sensitive << ( tmpOutput );

    SC_METHOD(thread_tmp_fu_79_p3);
    sensitive << ( InputData_V_in_sig );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( InputData_V_ap_vld_in_sig );
    sensitive << ( OutputData_1_ack_in );
    sensitive << ( OutputData_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state1_io );
    sensitive << ( ap_block_state2_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    InputData_V_preg = "0";
    InputData_V_ap_vld_preg = SC_LOGIC_0;
    OutputData_1_sel_rd = SC_LOGIC_0;
    OutputData_1_sel_wr = SC_LOGIC_0;
    OutputData_1_state = "00";
    tmpOutput = "00000000000000000000000000000000";
    bitCounter = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "axi_stream_gpio_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, InputData_V, "(port)InputData_V");
    sc_trace(mVcdFile, InputData_V_ap_vld, "(port)InputData_V_ap_vld");
    sc_trace(mVcdFile, OutputData_TDATA, "(port)OutputData_TDATA");
    sc_trace(mVcdFile, OutputData_TVALID, "(port)OutputData_TVALID");
    sc_trace(mVcdFile, OutputData_TREADY, "(port)OutputData_TREADY");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, InputData_V_preg, "InputData_V_preg");
    sc_trace(mVcdFile, InputData_V_in_sig, "InputData_V_in_sig");
    sc_trace(mVcdFile, InputData_V_ap_vld_preg, "InputData_V_ap_vld_preg");
    sc_trace(mVcdFile, InputData_V_ap_vld_in_sig, "InputData_V_ap_vld_in_sig");
    sc_trace(mVcdFile, OutputData_1_data_out, "OutputData_1_data_out");
    sc_trace(mVcdFile, OutputData_1_vld_in, "OutputData_1_vld_in");
    sc_trace(mVcdFile, OutputData_1_vld_out, "OutputData_1_vld_out");
    sc_trace(mVcdFile, OutputData_1_ack_in, "OutputData_1_ack_in");
    sc_trace(mVcdFile, OutputData_1_ack_out, "OutputData_1_ack_out");
    sc_trace(mVcdFile, OutputData_1_payload_A, "OutputData_1_payload_A");
    sc_trace(mVcdFile, OutputData_1_payload_B, "OutputData_1_payload_B");
    sc_trace(mVcdFile, OutputData_1_sel_rd, "OutputData_1_sel_rd");
    sc_trace(mVcdFile, OutputData_1_sel_wr, "OutputData_1_sel_wr");
    sc_trace(mVcdFile, OutputData_1_sel, "OutputData_1_sel");
    sc_trace(mVcdFile, OutputData_1_load_A, "OutputData_1_load_A");
    sc_trace(mVcdFile, OutputData_1_load_B, "OutputData_1_load_B");
    sc_trace(mVcdFile, OutputData_1_state, "OutputData_1_state");
    sc_trace(mVcdFile, OutputData_1_state_cmp_full, "OutputData_1_state_cmp_full");
    sc_trace(mVcdFile, tmpOutput, "tmpOutput");
    sc_trace(mVcdFile, bitCounter, "bitCounter");
    sc_trace(mVcdFile, InputData_V_blk_n, "InputData_V_blk_n");
    sc_trace(mVcdFile, OutputData_TDATA_blk_n, "OutputData_TDATA_blk_n");
    sc_trace(mVcdFile, tmp_3_fu_104_p2, "tmp_3_fu_104_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_3_reg_133, "tmp_3_reg_133");
    sc_trace(mVcdFile, tmp_1_fu_87_p2, "tmp_1_fu_87_p2");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_state1_io, "ap_block_state1_io");
    sc_trace(mVcdFile, tmp_2_fu_98_p2, "tmp_2_fu_98_p2");
    sc_trace(mVcdFile, ap_phi_mux_tmpOutput_new_phi_fu_52_p4, "ap_phi_mux_tmpOutput_new_phi_fu_52_p4");
    sc_trace(mVcdFile, tmpOutput_new_reg_49, "tmpOutput_new_reg_49");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, ap_phi_mux_bitCounter_new_phi_fu_62_p4, "ap_phi_mux_bitCounter_new_phi_fu_62_p4");
    sc_trace(mVcdFile, bitCounter_new_reg_59, "bitCounter_new_reg_59");
    sc_trace(mVcdFile, tmp_fu_79_p3, "tmp_fu_79_p3");
    sc_trace(mVcdFile, tmp_4_fu_73_p2, "tmp_4_fu_73_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("axi_stream_gpio.hdltvin.dat");
    mHdltvoutHandle.open("axi_stream_gpio.hdltvout.dat");
}

axi_stream_gpio::~axi_stream_gpio() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void axi_stream_gpio::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        InputData_V_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, OutputData_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
            InputData_V_ap_vld_preg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, InputData_V_ap_vld.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())))) {
            InputData_V_ap_vld_preg = InputData_V_ap_vld.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        InputData_V_preg = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, InputData_V_ap_vld.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())))) {
            InputData_V_preg = InputData_V.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OutputData_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OutputData_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OutputData_1_vld_out.read()))) {
            OutputData_1_sel_rd =  (sc_logic) (~OutputData_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OutputData_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OutputData_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OutputData_1_ack_in.read()))) {
            OutputData_1_sel_wr =  (sc_logic) (~OutputData_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OutputData_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OutputData_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OutputData_1_ack_out.read()) && 
              esl_seteq<1,2,2>(OutputData_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OutputData_1_vld_in.read()) && 
              esl_seteq<1,2,2>(OutputData_1_state.read(), ap_const_lv2_2)))) {
            OutputData_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OutputData_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OutputData_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(OutputData_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OutputData_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(OutputData_1_state.read(), ap_const_lv2_1)))) {
            OutputData_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OutputData_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(OutputData_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OutputData_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(OutputData_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(OutputData_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OutputData_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OutputData_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OutputData_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OutputData_1_ack_out.read()))))) {
            OutputData_1_state = ap_const_lv2_3;
        } else {
            OutputData_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, InputData_V_ap_vld_in_sig.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_104_p2.read()))) {
        bitCounter_new_reg_59 = tmp_2_fu_98_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_133.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, OutputData_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        bitCounter_new_reg_59 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, InputData_V_ap_vld_in_sig.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_104_p2.read()))) {
        tmpOutput_new_reg_49 = tmp_1_fu_87_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_133.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, OutputData_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        tmpOutput_new_reg_49 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OutputData_1_load_A.read())) {
        OutputData_1_payload_A = tmp_1_fu_87_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OutputData_1_load_B.read())) {
        OutputData_1_payload_B = tmp_1_fu_87_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, OutputData_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        bitCounter = ap_phi_mux_bitCounter_new_phi_fu_62_p4.read();
        tmpOutput = ap_phi_mux_tmpOutput_new_phi_fu_52_p4.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, InputData_V_ap_vld_in_sig.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        tmp_3_reg_133 = tmp_3_fu_104_p2.read();
    }
}

void axi_stream_gpio::thread_InputData_V_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, InputData_V_ap_vld.read())) {
        InputData_V_ap_vld_in_sig = InputData_V_ap_vld.read();
    } else {
        InputData_V_ap_vld_in_sig = InputData_V_ap_vld_preg.read();
    }
}

void axi_stream_gpio::thread_InputData_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        InputData_V_blk_n = InputData_V_ap_vld.read();
    } else {
        InputData_V_blk_n = ap_const_logic_1;
    }
}

void axi_stream_gpio::thread_InputData_V_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, InputData_V_ap_vld.read())) {
        InputData_V_in_sig = InputData_V.read();
    } else {
        InputData_V_in_sig = InputData_V_preg.read();
    }
}

void axi_stream_gpio::thread_OutputData_1_ack_in() {
    OutputData_1_ack_in = OutputData_1_state.read()[1];
}

void axi_stream_gpio::thread_OutputData_1_ack_out() {
    OutputData_1_ack_out = OutputData_TREADY.read();
}

void axi_stream_gpio::thread_OutputData_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OutputData_1_sel.read())) {
        OutputData_1_data_out = OutputData_1_payload_B.read();
    } else {
        OutputData_1_data_out = OutputData_1_payload_A.read();
    }
}

void axi_stream_gpio::thread_OutputData_1_load_A() {
    OutputData_1_load_A = (OutputData_1_state_cmp_full.read() & ~OutputData_1_sel_wr.read());
}

void axi_stream_gpio::thread_OutputData_1_load_B() {
    OutputData_1_load_B = (OutputData_1_sel_wr.read() & OutputData_1_state_cmp_full.read());
}

void axi_stream_gpio::thread_OutputData_1_sel() {
    OutputData_1_sel = OutputData_1_sel_rd.read();
}

void axi_stream_gpio::thread_OutputData_1_state_cmp_full() {
    OutputData_1_state_cmp_full =  (sc_logic) ((!OutputData_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OutputData_1_state.read() != ap_const_lv2_1))[0];
}

void axi_stream_gpio::thread_OutputData_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_104_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, InputData_V_ap_vld_in_sig.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        OutputData_1_vld_in = ap_const_logic_1;
    } else {
        OutputData_1_vld_in = ap_const_logic_0;
    }
}

void axi_stream_gpio::thread_OutputData_1_vld_out() {
    OutputData_1_vld_out = OutputData_1_state.read()[0];
}

void axi_stream_gpio::thread_OutputData_TDATA() {
    OutputData_TDATA = OutputData_1_data_out.read();
}

void axi_stream_gpio::thread_OutputData_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_104_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_133.read())))) {
        OutputData_TDATA_blk_n = OutputData_1_state.read()[1];
    } else {
        OutputData_TDATA_blk_n = ap_const_logic_1;
    }
}

void axi_stream_gpio::thread_OutputData_TVALID() {
    OutputData_TVALID = OutputData_1_state.read()[0];
}

void axi_stream_gpio::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void axi_stream_gpio::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void axi_stream_gpio::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, InputData_V_ap_vld_in_sig.read()));
}

void axi_stream_gpio::thread_ap_block_state1_io() {
    ap_block_state1_io = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_104_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OutputData_1_ack_in.read()));
}

void axi_stream_gpio::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_133.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OutputData_1_ack_in.read()));
}

void axi_stream_gpio::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, OutputData_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OutputData_1_state.read()[0]))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void axi_stream_gpio::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void axi_stream_gpio::thread_ap_phi_mux_bitCounter_new_phi_fu_62_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_133.read()))) {
        ap_phi_mux_bitCounter_new_phi_fu_62_p4 = ap_const_lv32_0;
    } else {
        ap_phi_mux_bitCounter_new_phi_fu_62_p4 = bitCounter_new_reg_59.read();
    }
}

void axi_stream_gpio::thread_ap_phi_mux_tmpOutput_new_phi_fu_52_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_133.read()))) {
        ap_phi_mux_tmpOutput_new_phi_fu_52_p4 = ap_const_lv32_0;
    } else {
        ap_phi_mux_tmpOutput_new_phi_fu_52_p4 = tmpOutput_new_reg_49.read();
    }
}

void axi_stream_gpio::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, OutputData_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OutputData_1_state.read()[0]))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void axi_stream_gpio::thread_ap_return() {
    ap_return = ap_const_lv32_0;
}

void axi_stream_gpio::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void axi_stream_gpio::thread_tmp_1_fu_87_p2() {
    tmp_1_fu_87_p2 = (!tmp_fu_79_p3.read().is_01() || !tmp_4_fu_73_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_fu_79_p3.read()) + sc_biguint<32>(tmp_4_fu_73_p2.read()));
}

void axi_stream_gpio::thread_tmp_2_fu_98_p2() {
    tmp_2_fu_98_p2 = (!ap_const_lv32_1.is_01() || !bitCounter.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(bitCounter.read()));
}

void axi_stream_gpio::thread_tmp_3_fu_104_p2() {
    tmp_3_fu_104_p2 = (!tmp_2_fu_98_p2.read().is_01() || !ap_const_lv32_20.is_01())? sc_lv<1>(): sc_lv<1>(tmp_2_fu_98_p2.read() == ap_const_lv32_20);
}

void axi_stream_gpio::thread_tmp_4_fu_73_p2() {
    tmp_4_fu_73_p2 = (!ap_const_lv32_1.is_01())? sc_lv<32>(): tmpOutput.read() << (unsigned short)ap_const_lv32_1.to_uint();
}

void axi_stream_gpio::thread_tmp_fu_79_p3() {
    tmp_fu_79_p3 = (!InputData_V_in_sig.read()[0].is_01())? sc_lv<32>(): ((InputData_V_in_sig.read()[0].to_bool())? ap_const_lv32_FFFFFFFF: ap_const_lv32_0);
}

void axi_stream_gpio::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, InputData_V_ap_vld_in_sig.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, OutputData_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && esl_seteq<1,1,1>(ap_const_logic_0, OutputData_1_state.read()[0]))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void axi_stream_gpio::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"InputData_V\" :  \"" << InputData_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"InputData_V_ap_vld\" :  \"" << InputData_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OutputData_TDATA\" :  \"" << OutputData_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OutputData_TVALID\" :  \"" << OutputData_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"OutputData_TREADY\" :  \"" << OutputData_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

