// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axi_stream_gpio,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.008000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=201,HLS_SYN_LUT=236,HLS_VERSION=2018_3}" *)

module axi_stream_gpio (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        InputData_V,
        InputData_V_ap_vld,
        OutputData_TDATA,
        OutputData_TVALID,
        OutputData_TREADY,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] InputData_V;
input   InputData_V_ap_vld;
output  [31:0] OutputData_TDATA;
output   OutputData_TVALID;
input   OutputData_TREADY;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] InputData_V_preg;
reg   [0:0] InputData_V_in_sig;
reg    InputData_V_ap_vld_preg;
reg    InputData_V_ap_vld_in_sig;
reg   [31:0] OutputData_1_data_out;
reg    OutputData_1_vld_in;
wire    OutputData_1_vld_out;
wire    OutputData_1_ack_in;
wire    OutputData_1_ack_out;
reg   [31:0] OutputData_1_payload_A;
reg   [31:0] OutputData_1_payload_B;
reg    OutputData_1_sel_rd;
reg    OutputData_1_sel_wr;
wire    OutputData_1_sel;
wire    OutputData_1_load_A;
wire    OutputData_1_load_B;
reg   [1:0] OutputData_1_state;
wire    OutputData_1_state_cmp_full;
reg   [31:0] tmpOutput;
reg   [31:0] bitCounter;
reg    InputData_V_blk_n;
reg    OutputData_TDATA_blk_n;
wire   [0:0] tmp_3_fu_104_p2;
wire    ap_CS_fsm_state2;
reg   [0:0] tmp_3_reg_133;
wire   [31:0] tmp_1_fu_87_p2;
reg    ap_block_state1;
reg    ap_block_state1_io;
wire   [31:0] tmp_2_fu_98_p2;
reg   [31:0] ap_phi_mux_tmpOutput_new_phi_fu_52_p4;
reg   [31:0] tmpOutput_new_reg_49;
reg    ap_block_state2_io;
reg   [31:0] ap_phi_mux_bitCounter_new_phi_fu_62_p4;
reg   [31:0] bitCounter_new_reg_59;
wire   [31:0] tmp_fu_79_p3;
wire   [31:0] tmp_4_fu_73_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 InputData_V_preg = 1'd0;
#0 InputData_V_ap_vld_preg = 1'b0;
#0 OutputData_1_sel_rd = 1'b0;
#0 OutputData_1_sel_wr = 1'b0;
#0 OutputData_1_state = 2'd0;
#0 tmpOutput = 32'd0;
#0 bitCounter = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        InputData_V_ap_vld_preg <= 1'b0;
    end else begin
        if ((~((1'b0 == OutputData_1_ack_in) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
            InputData_V_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == InputData_V_ap_vld))) begin
            InputData_V_ap_vld_preg <= InputData_V_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        InputData_V_preg <= 1'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == InputData_V_ap_vld))) begin
            InputData_V_preg <= InputData_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OutputData_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OutputData_1_ack_out) & (1'b1 == OutputData_1_vld_out))) begin
            OutputData_1_sel_rd <= ~OutputData_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OutputData_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OutputData_1_ack_in) & (1'b1 == OutputData_1_vld_in))) begin
            OutputData_1_sel_wr <= ~OutputData_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OutputData_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OutputData_1_state) & (1'b0 == OutputData_1_vld_in)) | ((2'd3 == OutputData_1_state) & (1'b0 == OutputData_1_vld_in) & (1'b1 == OutputData_1_ack_out)))) begin
            OutputData_1_state <= 2'd2;
        end else if ((((2'd1 == OutputData_1_state) & (1'b0 == OutputData_1_ack_out)) | ((2'd3 == OutputData_1_state) & (1'b0 == OutputData_1_ack_out) & (1'b1 == OutputData_1_vld_in)))) begin
            OutputData_1_state <= 2'd1;
        end else if (((~((1'b0 == OutputData_1_vld_in) & (1'b1 == OutputData_1_ack_out)) & ~((1'b0 == OutputData_1_ack_out) & (1'b1 == OutputData_1_vld_in)) & (2'd3 == OutputData_1_state)) | ((2'd1 == OutputData_1_state) & (1'b1 == OutputData_1_ack_out)) | ((2'd2 == OutputData_1_state) & (1'b1 == OutputData_1_vld_in)))) begin
            OutputData_1_state <= 2'd3;
        end else begin
            OutputData_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b0 == InputData_V_ap_vld_in_sig) | (1'b1 == ap_block_state1_io)) & (tmp_3_fu_104_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        bitCounter_new_reg_59 <= tmp_2_fu_98_p2;
    end else if ((~((1'b0 == OutputData_1_ack_in) | (1'b1 == ap_block_state2_io)) & (tmp_3_reg_133 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        bitCounter_new_reg_59 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b0 == InputData_V_ap_vld_in_sig) | (1'b1 == ap_block_state1_io)) & (tmp_3_fu_104_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        tmpOutput_new_reg_49 <= tmp_1_fu_87_p2;
    end else if ((~((1'b0 == OutputData_1_ack_in) | (1'b1 == ap_block_state2_io)) & (tmp_3_reg_133 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmpOutput_new_reg_49 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OutputData_1_load_A)) begin
        OutputData_1_payload_A <= tmp_1_fu_87_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OutputData_1_load_B)) begin
        OutputData_1_payload_B <= tmp_1_fu_87_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == OutputData_1_ack_in) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
        bitCounter <= ap_phi_mux_bitCounter_new_phi_fu_62_p4;
        tmpOutput <= ap_phi_mux_tmpOutput_new_phi_fu_52_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b0 == InputData_V_ap_vld_in_sig) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_3_reg_133 <= tmp_3_fu_104_p2;
    end
end

always @ (*) begin
    if ((1'b1 == InputData_V_ap_vld)) begin
        InputData_V_ap_vld_in_sig = InputData_V_ap_vld;
    end else begin
        InputData_V_ap_vld_in_sig = InputData_V_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        InputData_V_blk_n = InputData_V_ap_vld;
    end else begin
        InputData_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == InputData_V_ap_vld)) begin
        InputData_V_in_sig = InputData_V;
    end else begin
        InputData_V_in_sig = InputData_V_preg;
    end
end

always @ (*) begin
    if ((1'b1 == OutputData_1_sel)) begin
        OutputData_1_data_out = OutputData_1_payload_B;
    end else begin
        OutputData_1_data_out = OutputData_1_payload_A;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == InputData_V_ap_vld_in_sig) | (1'b1 == ap_block_state1_io)) & (tmp_3_fu_104_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        OutputData_1_vld_in = 1'b1;
    end else begin
        OutputData_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (tmp_3_fu_104_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_3_reg_133 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        OutputData_TDATA_blk_n = OutputData_1_state[1'd1];
    end else begin
        OutputData_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == OutputData_1_ack_in) | (1'b1 == ap_block_state2_io)) & (OutputData_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_reg_133 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_bitCounter_new_phi_fu_62_p4 = 32'd0;
    end else begin
        ap_phi_mux_bitCounter_new_phi_fu_62_p4 = bitCounter_new_reg_59;
    end
end

always @ (*) begin
    if (((tmp_3_reg_133 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_tmpOutput_new_phi_fu_52_p4 = 32'd0;
    end else begin
        ap_phi_mux_tmpOutput_new_phi_fu_52_p4 = tmpOutput_new_reg_49;
    end
end

always @ (*) begin
    if ((~((1'b0 == OutputData_1_ack_in) | (1'b1 == ap_block_state2_io)) & (OutputData_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b0 == InputData_V_ap_vld_in_sig) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b0 == OutputData_1_ack_in) | (1'b1 == ap_block_state2_io)) & (OutputData_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutputData_1_ack_in = OutputData_1_state[1'd1];

assign OutputData_1_ack_out = OutputData_TREADY;

assign OutputData_1_load_A = (~OutputData_1_sel_wr & OutputData_1_state_cmp_full);

assign OutputData_1_load_B = (OutputData_1_state_cmp_full & OutputData_1_sel_wr);

assign OutputData_1_sel = OutputData_1_sel_rd;

assign OutputData_1_state_cmp_full = ((OutputData_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OutputData_1_vld_out = OutputData_1_state[1'd0];

assign OutputData_TDATA = OutputData_1_data_out;

assign OutputData_TVALID = OutputData_1_state[1'd0];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (1'b0 == InputData_V_ap_vld_in_sig));
end

always @ (*) begin
    ap_block_state1_io = ((tmp_3_fu_104_p2 == 1'd1) & (1'b0 == OutputData_1_ack_in));
end

always @ (*) begin
    ap_block_state2_io = ((tmp_3_reg_133 == 1'd1) & (1'b0 == OutputData_1_ack_in));
end

assign ap_return = 32'd0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign tmp_1_fu_87_p2 = (tmp_fu_79_p3 + tmp_4_fu_73_p2);

assign tmp_2_fu_98_p2 = (32'd1 + bitCounter);

assign tmp_3_fu_104_p2 = ((tmp_2_fu_98_p2 == 32'd32) ? 1'b1 : 1'b0);

assign tmp_4_fu_73_p2 = tmpOutput << 32'd1;

assign tmp_fu_79_p3 = ((InputData_V_in_sig[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

endmodule //axi_stream_gpio
